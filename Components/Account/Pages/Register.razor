@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using AvinaShop.Data
@using AvinaShop.Services.UserServices
@using AvinaShop.Utility
@using AvinaShop.ViewModels.Account

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<!-- Injecting the UserRolService -->
@inject IUserRoleService UserRoleService


<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <!-- Email field -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <!-- Password field -->
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <!-- Confirm password field -->
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <!-- Role selection dropdown -->
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-select">
                    <option value="@AppConstants.Role_Customer" selected>@AppConstants.Role_Customer</option>
                    <option value="@AppConstants.Role_Admin">@AppConstants.Role_Admin</option>
                </InputSelect>
                <label for="role">Select Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    // ViewModel for the register form inputs
    [SupplyParameterFromForm]
    private RegisterInputModel Input { get; set; } = new();


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // Display combined error message if registration fails
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
    
    /// <summary>
    /// Handles user registration logic including role assignment and email confirmation
    /// </summary>
    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        #region Role Management
       
        /*
         ** HAD BEEN REMOVED**
          // Create roles if they don't already exist
           if (!await RoleManager.RoleExistsAsync(AppConstants.Role_Customer))
             {
             // Create admin and customer roles if they do not already exist
                 await RoleManager.CreateAsync(new IdentityRole(AppConstants.Role_Admin));
                 await RoleManager.CreateAsync(new IdentityRole(AppConstants.Role_Customer));
             }

             if(Input.Role is not null)
             {
                 await UserManager.AddToRoleAsync(user, Input.Role);
             }
             else
             {
                 await UserManager.AddToRoleAsync(user, AppConstants.Role_Customer);
             }
           */

        //** Use the new service for role assignment and creation**
        
        //Using the IRoleService to ensure that roles exist

        await UserRoleService.EnsureRolesExistAsync(); //Ensuring roles exist before assigning
        await UserRoleService.AssignRoleToUserAsync(user, Input.Role);// Assign selected or default role

        #endregion Role Management

        #region ConfirmEmail
        // Generate email confirmation link
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // Redirect to confirmation page if email confirmation required
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        #endregion ConfirmEmail
        
        // Sign in and redirect
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    // Create a new ApplicationUser instance
    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    // Get email store from the user store
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

}
