@using System.Globalization
@using AvinaShop.Data
@using AvinaShop.Utility.Enums
<!-- Render the cart items -->
@foreach (var cartItem in Items)
{
    <div class="d-flex p-2 m-2">
        <div class="card flex-row w-100">
            <img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl ?? "/images/default.png")">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h4>@cartItem.Product.Name</h4>
                    <h4>@cartItem.Product.Price.ToString("C", _usCulture)</h4>
                </div>
                <div class="flex-fill">
                    <h4 class="text-danger">
                        @((cartItem.Product.Price * cartItem.Count).ToString("C", _usCulture))
                    </h4>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex justify-content-between g-0">
                        <span @onclick="()=>UpdateItem(cartItem.ProductId, -1)">
                            <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                        </span>
                        <span class="ml-1 me-1">
                            <b class="lead">@cartItem.Count</b>
                        </span>
                        <span @onclick="()=>UpdateItem(cartItem.ProductId, 1)">
                            <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                        </span>
                    </div>
                    <button class="btn btn-danger" @onclick="()=>UpdateItem(cartItem.ProductId, (int)CartActionType.Remove)">
                        Remove
                    </button>

                </div>
            </div>
        </div>
    </div>
}

@code {
    private readonly CultureInfo _usCulture = CultureInfo.GetCultureInfo("en-us"); // US culture for currency formatting
    [Parameter] public IEnumerable<ShoppingCart> Items { get; set; }  // ShoppingCart items passed from parent component
    [Parameter] public EventCallback<Tuple<int, int>> OnItemUpdated { get; set; }  // Callback to notify the parent for item update

    private void UpdateItem(int productId, int changeBy)
    {
        OnItemUpdated.InvokeAsync(Tuple.Create(productId, changeBy));  // Invoke the callback passing productId and changeBy
    }
}
