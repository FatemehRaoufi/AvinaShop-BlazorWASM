@page "/cart"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using AvinaShop.Data
@using AvinaShop.Repository.IRepository
@using AvinaShop.Services
@using AvinaShop.Utility
@using AvinaShop.Helpers

<!--  Authentication Services -->
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Cart and Order Services -->
@inject IShoppingCartRepository CartRepository
@inject IOrderRepository OrderRepository

<!-- UI and Payment Services -->
@inject NavigationManager NavigationManager
@inject SharedStateService SharedStateService
@inject PaymentService PaymentService

<!-- Apply the Authorize attribute to enforce user authentication -->
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    @if (ShoppingCarts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>
                    <CartSummary Items="ShoppingCarts" OnItemUpdated="UpdateCartItem" />
                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <PickupForm OrderHeader="OrderHeader" TotalItems="TotalItems" OnSubmit="ProcessOrderCreation" />
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                Your cart is empty! Please add items to cart.
            </div>
        </div>
    }
}

@code {
    private const int RemoveItemCode = -10000; // Special code for removing item from the cart
    private readonly CultureInfo _usCulture = CultureInfo.GetCultureInfo("en-us"); // US culture for currency formatting

    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>(); // Cart items
    private bool IsProcessing { get; set; } = true; // Flag for processing state
    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader(); // Order details
    private int TotalItems { get; set; } = 0; // Total number of items in cart

    // Initialize order header with authenticated user's information
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        OrderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        OrderHeader.Status = AppConstants.StatusPending;
    }

    // After the component has rendered, load the cart items
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCartAsync(); // Load the cart data for the user
            IsProcessing = false;
            StateHasChanged(); // Refresh the UI
        }
    }

    // Load cart items from the repository using the helper
    private async Task LoadCartAsync()
    {
        ShoppingCarts = await CartHelper.LoadCartAsync(CartRepository, OrderHeader.UserId); // Use helper to load cart
        OrderHeader.OrderTotal = CartHelper.CalculateTotalAmount(ShoppingCarts); // Calculate total amount
        TotalItems = CartHelper.CalculateTotalItems(ShoppingCarts); // Calculate total items
    }

    // Update cart item count (add/remove item)
    private async Task UpdateCartItem(Tuple<int, int> itemUpdate)
    {
        var productId = itemUpdate.Item1;
        var updateBy = itemUpdate.Item2;

        // Update the cart using helper method
        await CartHelper.UpdateCartItemAsync(CartRepository, OrderHeader.UserId, productId, updateBy);

        // Update the global cart count and reload cart data
        SharedStateService.TotalCartCount = await CartRepository.GetTotalCartCartCountAsync(OrderHeader.UserId);
        await LoadCartAsync(); // Reload cart data
    }

    // Process the order and create a Stripe checkout session
    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield(); // Ensure UI responsiveness during processing

        // Convert shopping cart to order details for Stripe session
        OrderHeader.OrderDetails = AppConstants.ConvertShoppingCartListToOrderDetail(ShoppingCarts.ToList());

        // Create the Stripe checkout session
        var session = PaymentService.CreateStripeCheckoutSession(OrderHeader);
        OrderHeader.SessionId = session.Id;

        // Save the order in the database
        await OrderRepository.CreateAsync(OrderHeader);

        // Redirect the user to the Stripe payment gateway
        NavigationManager.NavigateTo(session.Url);
    }
}
