@page "/"
@using System.Globalization
@using AvinaShop.Data
@using AvinaShop.Repository.IRepository
@using AvinaShop.Services
@using AvinaShop.Services.Extensions

<!--  Authentication Services -->
@inject AuthenticationStateProvider _AuthenticationStateProvider

<!--  Extension -->
@inject IJSRuntime _jsRuntime

<!-- Product and Cart Services -->
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartRepository _cartRepository

<!-- UI Services -->
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject LoadingService _loadingService

<PageTitle>Home</PageTitle>

    <!-- Main page content -->
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                           @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductByName"
                    placeholder="Search for Elektronik Items!"
                    style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>
    <!-- Navigation for product categories -->
        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @foreach (var category in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(category.Id)" href="#" style="cursor: pointer" 
                        @onclick="()=>FilterProducts(category.Id)">
                            @category.Name
                        </span>
                    </li>
                }
                
            </ul>
            <div class="row mt-4 mx-1">
                @if (hasMoreProducts)
                {
                    <div class="text-center my-4">
                        @if (isLoadingMore)
                        {
                            <p>Loading more products...</p>
                        }
                        else
                        {
                            <button class="btn btn-outline-primary" @onclick="LoadMoreAsync">Load More</button>
                        }
                    </div>
                }

                @foreach (var prod in FilteredProducts)
                {
                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if(!string.IsNullOrEmpty(prod.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled"> @prod.SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-end text-danger px-3 h3">
                                    @prod.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </div>
                            </div>
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(prod.ImageUrl))
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@prod.ImageUrl" />
                                }
                                else
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style=""/>
                                }

                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@prod.Name</h5>
                                <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                                <h4 class="text-center">
                                    <div class="m-lg-auto p-2" @onclick="()=>AddOrderItem(prod)">
                                    <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control" > Add to cart</i>
                                    </div>
                                </h4>
                               

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>


@code{
    private IEnumerable<Product> Products = new List<Product>(); // Holds all products loaded from the repository
    private IEnumerable<Category> Categories = new List<Category>();// All product categories
    private IEnumerable<Product> FilteredProducts = new List<Product>(); // Filtered view of products for UI display

    private int _selectedCategoryId = 0; // Currently selected category ID
    private string _searchText = ""; // Search input value
    
    // Pagination state
    private int pageSize = 9;
    private int currentPage = 1;
    private bool isLoadingMore = false;
    private bool hasMoreProducts = true;

    // Called only once when the page renders for the first time (On first render, load products and categories) 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loadingService.Show(); // Trigger loading spinner
            await Task.Yield(); // keeping UI Responsive

            await LoadProducts(); // Load initial product set
            _loadingService.Hide(); // Hide loading spinner

            StateHasChanged(); // Notify UI to re-render
        }
    }

    // Filters products based on selected category ID
    private void FilterProducts(int categoryId)
    {
        if (categoryId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = categoryId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(u => u.CategoryId == categoryId).ToList();
            _selectedCategoryId = categoryId;
            _searchText = String.Empty;
        }
    }

    // Filters products in real-time as user types in search box
    private void FilterProductByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
            .Where(u => u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        _searchText = newValueOfSearchText;
    }

    // Sets active CSS class on selected tab
    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

  // Loads products from repository (mocked pagination on client)
  
    private async Task LoadProducts(bool isInitial = true)
    {
        var allProducts = await _productRepository.GetAllAsync(); // Ideally should support pagination on server!
        Products = allProducts;

        Categories = await _categoryRepository.GetAllAsync();

        if (isInitial)
        {
            currentPage = 1;
            FilteredProducts = Products.Take(pageSize).ToList();
            hasMoreProducts = Products.Count() > FilteredProducts.Count();
        }
        else
        {
            currentPage++;
            var more = Products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
            FilteredProducts = FilteredProducts.Concat(more).ToList();
            hasMoreProducts = Products.Count() > FilteredProducts.Count();
        }
    }

    // Handles 'Load More' button click to simulate pagination
    private async Task LoadMoreAsync()
    {
        isLoadingMore = true;
        await Task.Delay(500); //Simulate API delay
        await LoadProducts(false);
        isLoadingMore = false;
    }

    // Message model used to encapsulate cart operation data
    public class AddToCartMessage
    {
        public string UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    // Handles the actual logic of adding product to cart using message-based abstraction
    private async Task ProcessAddToCartMessageAsync(AddToCartMessage msg)
    {
        try
        {
            var result = await _cartRepository.UpdateCartAsync(msg.UserId, msg.ProductId, msg.Quantity);
            _SharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCartCountAsync(msg.UserId);

            if (result)
            {
                _jsRuntime?.ToastrSuccess("Product added to cart successfully (message-processed)");
            }
            else
            {
                _jsRuntime?.ToastrError("Error encountered while adding to cart");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing message: {ex.Message}");
            _jsRuntime?.ToastrError("Unexpected error occurred.");
        }
    }

    // Called when the user clicks "Add to Cart" button for a product
    private async Task AddOrderItem(Product product)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            _NavigationManager.NavigateTo("account/login");
            return;
        }

        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        
        var message = new AddToCartMessage
            {
                UserId = userId,
                ProductId = product.Id,
                Quantity = 1
            };

        // Decoupled logic via message handler
        await ProcessAddToCartMessageAsync(message);
    }


}   