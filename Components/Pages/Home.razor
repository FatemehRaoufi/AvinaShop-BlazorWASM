@page "/"
@using System.Globalization
@using AvinaShop.Data
@using AvinaShop.Repository.IRepository
@using AvinaShop.Services
@using AvinaShop.Services.AuthenticationService
@using AvinaShop.Services.ShoppingCartServices
@using AvinaShop.Services.Extensions

<!-- Authentication Services -->
@inject IAuthenticationService _authenticationService

<!-- Product and Cart Services -->
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartService _shoppingCartService

<!-- UI and JavaScript Services -->
@inject NavigationManager _NavigationManager
@inject IJSRuntime _jsRuntime
@inject SharedStateService _SharedStateService
@inject LoadingService _loadingService

<PageTitle>Home</PageTitle>

<!-- Main page content -->
<div class="container-fluid px-0 m-0 full-width">
    <div class="jumbotron-custom">
        <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">
            <div class="d-flex align-items-center" style="width: 100%;">
                <input type="text" class="form-control rounded-pill"
                       @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductByName"
                       placeholder="Search for Elektronik Items!"
                       style="width: 100%; padding: 20px;">
                <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
            </div>
        </div>
    </div>

    <!-- Navigation for product categories -->
    <div class="content px-4 m-2">
        <ul class="nav nav-underline justify-content-center mb-2">
            <li class="nav-item">
                <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
            </li>
            @foreach (var category in Categories)
            {
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(category.Id)" href="#" style="cursor: pointer"
                          @onclick="()=>FilterProducts(category.Id)">
                        @category.Name
                    </span>
                </li>
            }
        </ul>
        <div class="row mt-4 mx-1">
            @if (hasMoreProducts)
            {
                <div class="text-center my-4">
                    @if (isLoadingMore)
                    {
                        <p>Loading more products...</p>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="LoadMoreAsync">Load More</button>
                    }
                </div>
            }

            @foreach (var prod in FilteredProducts)
            {
                <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                    <div class="card">
                        <div class="mt-3 mb-2 row">
                            <div class="col-6 px-3">
                                @if (!string.IsNullOrEmpty(prod.SpecialTag))
                                {
                                    <i class="bi bi-star btn btn-outline-success disabled"> @prod.SpecialTag</i>
                                }
                            </div>
                            <div class="col-6 text-end text-danger px-3 h3">
                                @prod.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                            </div>
                        </div>
                        <div class="text-center">
                            @if (!string.IsNullOrEmpty(prod.ImageUrl))
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@prod.ImageUrl" />
                            }
                            else
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" />
                            }
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center lead text-success">@prod.Name</h5>
                            <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                            <h4 class="text-center">
                                <div class="m-lg-auto p-2" @onclick="()=>AddOrderItem(prod)">
                                    <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control"> Add to cart</i>
                                </div>
                            </h4>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();

    private int _selectedCategoryId = 0;
    private string _searchText = "";

    private int pageSize = 9;
    private int currentPage = 1;
    private bool isLoadingMore = false;
    private bool hasMoreProducts = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loadingService.Show();
            await Task.Yield();

            await LoadProducts();
            _loadingService.Hide();

            StateHasChanged();
        }
    }

    private void FilterProducts(int categoryId)
    {
        if (categoryId == 0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = categoryId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(u => u.CategoryId == categoryId).ToList();
            _selectedCategoryId = categoryId;
            _searchText = String.Empty;
        }
    }

    private void FilterProductByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
            .Where(u => u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        _searchText = newValueOfSearchText;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task LoadProducts(bool isInitial = true)
    {
        var allProducts = await _productRepository.GetAllAsync();
        Products = allProducts;

        Categories = await _categoryRepository.GetAllAsync();

        if (isInitial)
        {
            currentPage = 1;
            FilteredProducts = Products.Take(pageSize).ToList();
            hasMoreProducts = Products.Count() > FilteredProducts.Count();
        }
        else
        {
            currentPage++;
            var more = Products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
            FilteredProducts = FilteredProducts.Concat(more).ToList();
            hasMoreProducts = Products.Count() > FilteredProducts.Count();
        }
    }

    private async Task LoadMoreAsync()
    {
        isLoadingMore = true;
        await Task.Delay(500);
        await LoadProducts(false);
        isLoadingMore = false;
    }

    private async Task AddOrderItem(Product product)
    {
        if (!await IsUserAuthenticatedAsync())
        {
            RedirectToLogin();
            return;
        }

        var userId = await GetUserIdAsync();
        if (string.IsNullOrEmpty(userId))
        {
            _jsRuntime?.ToastrError("User ID not found.");
            return;
        }

        // Now using AddItemToCartAsync instead of AddOrUpdateItemAsync
        var result = await _shoppingCartService.AddItemToCartAsync(userId, product.Id, 1);

        if (result)
        {
            _SharedStateService.TotalCartCount = await _shoppingCartService.GetCartItemCountAsync(userId);
            _jsRuntime?.ToastrSuccess("Product added to cart successfully");
        }
        else
        {
            _jsRuntime?.ToastrError("Error encountered while adding product to cart");
        }
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        return await _authenticationService.IsAuthenticatedAsync();
    }

    private void RedirectToLogin()
    {
        _NavigationManager.NavigateTo("account/login");
    }

    private async Task<string> GetUserIdAsync()
    {
        return await _authenticationService.GetUserIdAsync();
    }
}
