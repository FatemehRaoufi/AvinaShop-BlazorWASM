@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using AvinaShop.Data
@using AvinaShop.Services.OrderServices
@using AvinaShop.Services

<!-- Order Services -->
@inject IOrderService _orderService

<!-- UI and Payment Services -->
@inject NavigationManager _navigationManager
@inject LoadingService _loadingService

<!-- Apply the Authorize attribute to enforce user authentication -->
@attribute [Authorize]


<div class="container my-5 mx-auto p-4 w-100" style="max-width: 950px;">
        <div class="card shadow border-0">
            <div class="card-header bg-black text-white text-center py-3">
                <h2>Order List</h2>
            </div>

            <div class="card-body p-4">
                @if (OrderHeaders.Any())
                {
                    <table class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Phone</th>
                                <th>Email</th>
                                <th>Order Total</th>
                                <th>Order Date</th>
                                <th>Status</th>
                                <th class="text-center">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in OrderHeaders)
                            {
                                <tr>
                                    <td>@order.Id</td>
                                    <td>@order.Name</td>
                                    <td>@order.PhoneNumber</td>
                                    <td>@order.Email</td>
                                    <td>@order.OrderTotal.ToString("C")</td>
                                    <td>@order.OrderDate.ToShortDateString()</td>
                                    <td>@order.Status</td>
                                    <td class="text-center">
                                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToOrderDetails(order.Id)">
                                            Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info text-center">
                        No orders found.
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = Enumerable.Empty<OrderHeader>();
    private const string OrderDetailsRoute = "order/details/";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private void NavigateToOrderDetails(int orderId)
    {
        _navigationManager.NavigateTo($"{OrderDetailsRoute}{orderId}");
    }
    
   
    protected override async Task OnInitializedAsync()
    {
        _loadingService.Show();
        OrderHeaders = await _orderService.GetOrderHeadersAsync();
        _loadingService.Hide();
    }
    /*
    private bool IsProcessing { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
        if (firstRender)
            {
            await LoadOrdersAsync();
    }
    }

    private async Task LoadOrdersAsync()
        {
        StartProcessing();
        OrderHeaders = await _orderService.GetOrderHeadersAsync();
        StopProcessing();
    }
    private void StartProcessing()
        {
        IsProcessing = true;
        StateHasChanged();
    }

    private void StopProcessing()
        {
        IsProcessing = false;
        StateHasChanged();
        }
    */

}
