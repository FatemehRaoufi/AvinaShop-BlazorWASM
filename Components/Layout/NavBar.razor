@using AvinaShop.Repository.IRepository
@using AvinaShop.Services

@inject AuthenticationStateProvider _authStateProvider
@inject SharedStateService _sharedstateService
@inject IShoppingCartRepository _shoppingCartRepository

<!-- Main navigation bar -->
<nav class="navbar navbar-expand-md navbar-dark bg-dark pb-4 pt-4">
	<div class="container-fluid">

		<!-- Logo and brand name -->
		<a class="navbar-brand" href="">
			<img src="/images/Logo.jpg" alt="Bootstrap" width="30" height="24">
			Avina Shop
		</a>

		<!-- Mobile responsive toggle button -->
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
				aria-controls="navbarCollapse" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>

		<!-- Navbar links section -->
		<div class="collapse navbar-collapse" id="navbarCollapse">
			<ul class="navbar-nav me-auto mb-2 mb-md-0">

				<!-- Home link -->
				<li class="nav-item mx-2">
					<NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
						<span class="bi bi-house-door" aria-hidden="true"></span> Home
					</NavLink>
				</li>

				<!-- Cart link with item count -->
				<li class="nav-item mx-2">
					<NavLink class="nav-link" href="/cart">
						<span class="bi bi-cart3" aria-hidden="true"></span> Cart (@_sharedstateService.TotalCartCount)
					</NavLink>
				</li>

				<!-- Order list link -->
				<li class="nav-item mx-2">
					<NavLink class="nav-link" href="/order/list">
						<span class="bi bi-card-list" aria-hidden="true"></span> Order List
					</NavLink>
				</li>

			</ul>

			<!-- Right-aligned authentication section -->
			<ul class="d-flex navbar-nav mb-2 mb-md-0">
				<AuthorizeView>
					<Authorized>
						<!-- Welcome message with user name -->
						<li class="nav-item">
							<NavLink class="nav-link p-2" href="Account/Manage">
								Welcome, @context?.User?.Identity?.Name
							</NavLink>
						</li>

						<!-- Logout form with antiforgery token -->
						<li class="nav-item">
							<form action="Account/Logout" method="post">
								<AntiforgeryToken />
								<input type="hidden" name="ReturnUrl" value="" />
								<button type="submit" class="nav-link btn btn-success">
									<span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
								</button>
							</form>
						</li>
					</Authorized>

					<NotAuthorized>
						<!-- Register link -->
						<li class="nav-item">
							<NavLink class="nav-link" href="Account/Register">
								<span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
							</NavLink>
						</li>

						<!-- Login link -->
						<li class="nav-item">
							<NavLink class="nav-link btn btn-success" href="Account/Login">
								<span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
							</NavLink>
						</li>
					</NotAuthorized>
				</AuthorizeView>
			</ul>
		</div>
	</div>
</nav>

@code {
	// Subscribe to shared state changes and fetch initial cart count on component init
	protected override void OnInitialized()
	{
		_sharedstateService.OnChange += OnSharedStateChange;
		GetInitialCount();
	}

	// Trigger UI refresh when shared state changes
	private void OnSharedStateChange()
	{
		InvokeAsync(StateHasChanged);
	}

	// Retrieve the total cart count for the logged-in user
	public async Task GetInitialCount()
	{
		var authState = await _authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		_sharedstateService.TotalCartCount =
			await _shoppingCartRepository.GetTotalCartCartCountAsync(
				user?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value
			);
	}

	// Unsubscribe from event when component is disposed to prevent memory leaks
	public void Dispose()
	{
		_sharedstateService.OnChange -= OnSharedStateChange;
	}
}
