@implements IDisposable

@inject NavigationManager NavigationManager

<!-- Top navigation bar -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <!-- Brand name/logo -->
        <a class="navbar-brand" href="">AvinaShop</a>
    </div>
</div>

<!-- Sidebar toggle checkbox for mobile view -->
<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<!-- Scrollable sidebar nav container -->
<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">

        <!-- Home navigation link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <!-- Category page link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="category" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Category
            </NavLink>
        </div>

        <!-- Product page link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="product" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Product
            </NavLink>
        </div>

        <!-- Cart link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="/cart" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Cart
            </NavLink>
        </div>

        <!-- Order list link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="/order/list" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Order List
            </NavLink>
        </div>

        <!-- Page that requires authentication -->
        <div class="nav-item px-3">
            <NavLink class="nav-link p-2" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
            </NavLink>
        </div>

        <!-- Conditional links based on user authentication -->
        <AuthorizeView>
            <Authorized>
                <!-- Profile/account management link -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link p-2" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>

                <!-- Logout form with antiforgery token -->
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>

            <NotAuthorized>
                <!-- Register link for new users -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link p-2" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>

                <!-- Login link for unauthenticated users -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link p-2" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    // Set the initial relative URL and subscribe to location changes
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    // Triggered when the user navigates to a different page
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged(); // Re-render component
    }

    // Unsubscribe from the event to prevent memory leaks
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
